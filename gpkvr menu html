<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GPK ULTRA 3D | Immersive Collector's Hub</title>
    <style>
        :root {
            --gpk-red: #ff3e41;
            --gpk-yellow: #ffde37;
            --gpk-blue: #2e86ab;
            --gpk-black: #1a1a1a;
            --gpk-paper: #f5f5f0;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Bangers', cursive, sans-serif;
        }
        
        body {
            background-color: var(--gpk-black);
            color: white;
            overflow-x: hidden;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* Loading Screen */
        #loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--gpk-black);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        
        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: var(--gpk-red);
            animation: spin 1s ease-in-out infinite;
            margin-bottom: 20px;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Main 3D Container */
        #scene-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0;
        }

        /* UI Elements */
        .ui-element {
            position: absolute;
            pointer-events: auto;
            z-index: 100;
        }

        /* Navigation Controls */
        #nav-controls {
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 15px;
        }

        .nav-button {
            background: var(--gpk-yellow);
            color: var(--gpk-black);
            border: 3px solid var(--gpk-black);
            padding: 12px 24px;
            border-radius: 30px;
            font-size: 1.2rem;
            cursor: pointer;
            box-shadow: 0 4px 10px rgba(0,0,0,0.3);
            transition: all 0.3s ease;
        }

        .nav-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0,0,0,0.4);
        }

        /* Card Styles */
        .card-3d {
            width: 280px;
            height: 380px;
            transform-style: preserve-3d;
            transition: transform 0.8s;
            cursor: pointer;
        }

        .card-3d.flipped {
            transform: rotateY(180deg);
        }

        .card-face {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 10px 25px rgba(0,0,0,0.3);
            border: 4px solid var(--gpk-black);
        }

        .card-front {
            background: white;
            transform: rotateY(0deg);
        }

        .card-back {
            background: repeating-linear-gradient(
                45deg,
                var(--gpk-red),
                var(--gpk-red) 10px,
                var(--gpk-yellow) 10px,
                var(--gpk-yellow) 20px
            );
            transform: rotateY(180deg);
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .nav-button {
                padding: 10px 15px;
                font-size: 1rem;
            }
        }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Bangers&display=swap" rel="stylesheet">
</head>
<body>
    <!-- Loading Screen -->
    <div id="loading-screen">
        <div class="loading-spinner"></div>
        <h2>LOADING GPK ULTRA 3D...</h2>
    </div>

    <!-- Main 3D Container -->
    <div id="scene-container"></div>

    <!-- Navigation Controls -->
    <div id="nav-controls" class="ui-element">
        <button class="nav-button" id="explore-btn">EXPLORE</button>
        <button class="nav-button" id="collection-btn">COLLECTION</button>
        <button class="nav-button" id="gallery-btn">GALLERY</button>
    </div>

    <!-- Three.js and other scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.min.js"></script>
    
    <script>
        // Main Application
        class GPKUltra3D {
            constructor() {
                // Core properties
                this.scene = null;
                this.camera = null;
                this.renderer = null;
                this.controls = null;
                this.mixer = null;
                this.clock = new THREE.Clock();
                
                // Scene objects
                this.cardMeshes = [];
                this.currentScene = 'main';
                
                // Initialize the app
                this.init();
            }
            
            async init() {
                // Setup Three.js
                this.setupRenderer();
                this.setupScene();
                this.setupCamera();
                this.setupLights();
                this.setupControls();
                
                // Load assets
                await this.loadAssets();
                
                // Setup UI
                this.setupUI();
                
                // Hide loading screen
                document.getElementById('loading-screen').style.display = 'none';
                
                // Start animation loop
                this.animate();
            }
            
            setupRenderer() {
                // Create WebGL renderer
                this.renderer = new THREE.WebGLRenderer({
                    antialias: true,
                    alpha: true
                });
                this.renderer.setPixelRatio(window.devicePixelRatio);
                this.renderer.setSize(window.innerWidth, window.innerHeight);
                this.renderer.outputEncoding = THREE.sRGBEncoding;
                document.getElementById('scene-container').appendChild(this.renderer.domElement);
                
                // Handle window resize
                window.addEventListener('resize', () => {
                    this.camera.aspect = window.innerWidth / window.innerHeight;
                    this.camera.updateProjectionMatrix();
                    this.renderer.setSize(window.innerWidth, window.innerHeight);
                });
            }
            
            setupScene() {
                this.scene = new THREE.Scene();
                this.scene.background = new THREE.Color(0x1a1a1a);
                this.scene.fog = new THREE.FogExp2(0x1a1a1a, 0.002);
            }
            
            setupCamera() {
                this.camera = new THREE.PerspectiveCamera(
                    75, 
                    window.innerWidth / window.innerHeight, 
                    0.1, 
                    1000
                );
                this.camera.position.set(0, 1.6, 5);
            }
            
            setupLights() {
                // Ambient light
                const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
                this.scene.add(ambientLight);
                
                // Directional light
                const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
                directionalLight.position.set(1, 1, 1);
                this.scene.add(directionalLight);
                
                // Hemisphere light
                const hemisphereLight = new THREE.HemisphereLight(0xffffbb, 0x080820, 0.5);
                this.scene.add(hemisphereLight);
            }
            
            setupControls() {
                this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
                this.controls.enableDamping = true;
                this.controls.dampingFactor = 0.05;
                this.controls.screenSpacePanning = false;
                this.controls.maxPolarAngle = Math.PI;
                this.controls.minPolarAngle = 0;
                this.controls.maxDistance = 50;
                this.controls.minDistance = 2;
            }
            
            async loadAssets() {
                // Load textures
                const textureLoader = new THREE.TextureLoader();
                
                // Load card textures
                this.cardTextures = await Promise.all(
                    cardData.map(card => {
                        return new Promise((resolve) => {
                            textureLoader.load(
                                card.imageUrl,
                                texture => resolve(texture),
                                undefined,
                                () => resolve(null) // Fallback if texture fails to load
                            );
                        });
                    })
                );
                
                // Load environment
                await this.loadEnvironment();
            }
            
            async loadEnvironment() {
                // Create a simple room environment
                const roomGeometry = new THREE.BoxGeometry(20, 10, 20);
                const roomMaterial = new THREE.MeshStandardMaterial({
                    color: 0x333333,
                    side: THREE.BackSide,
                    roughness: 0.8
                });
                const room = new THREE.Mesh(roomGeometry, roomMaterial);
                this.scene.add(room);
                
                // Add display cases
                this.createDisplayCases();
            }
            
            createDisplayCases() {
                // Create 3 display cases in a circular arrangement
                const radius = 5;
                const count = 3;
                
                for (let i = 0; i < count; i++) {
                    const angle = (i / count) * Math.PI * 2;
                    const x = Math.cos(angle) * radius;
                    const z = Math.sin(angle) * radius;
                    
                    this.createDisplayCase(x, 0, z, angle + Math.PI/2);
                }
            }
            
            createDisplayCase(x, y, z, rotationY) {
                // Case base
                const baseGeometry = new THREE.BoxGeometry(3, 0.2, 1.5);
                const baseMaterial = new THREE.MeshStandardMaterial({
                    color: 0x222222,
                    metalness: 0.5,
                    roughness: 0.1
                });
                const base = new THREE.Mesh(baseGeometry, baseMaterial);
                base.position.set(x, y, z);
                base.rotation.y = rotationY;
                this.scene.add(base);
                
                // Glass cover
                const glassGeometry = new THREE.BoxGeometry(2.8, 1.8, 1.3);
                const glassMaterial = new THREE.MeshPhysicalMaterial({
                    color: 0xffffff,
                    transmission: 0.9,
                    roughness: 0,
                    metalness: 0,
                    clearcoat: 1,
                    clearcoatRoughness: 0
                });
                const glass = new THREE.Mesh(glassGeometry, glassMaterial);
                glass.position.set(x, y + 1, z);
                glass.rotation.y = rotationY;
                this.scene.add(glass);
                
                // Add lighting inside case
                const caseLight = new THREE.PointLight(0xffffee, 1, 2);
                caseLight.position.set(x, y + 0.5, z);
                this.scene.add(caseLight);
                
                return base;
            }
            
            setupUI() {
                // Navigation buttons
                document.getElementById('explore-btn').addEventListener('click', () => {
                    this.switchScene('explore');
                });
                
                document.getElementById('collection-btn').addEventListener('click', () => {
                    this.switchScene('collection');
                });
                
                document.getElementById('gallery-btn').addEventListener('click', () => {
                    this.switchScene('gallery');
                });
            }
            
            switchScene(newScene) {
                // Transition between scenes
                if (this.currentScene === newScene) return;
                
                // Scene transition logic
                this.currentScene = newScene;
                
                // Update camera position based on scene
                switch(newScene) {
                    case 'explore':
                        gsap.to(this.camera.position, {
                            x: 0,
                            y: 1.6,
                            z: 5,
                            duration: 1
                        });
                        break;
                    case 'collection':
                        gsap.to(this.camera.position, {
                            x: 0,
                            y: 1.2,
                            z: 3,
                            duration: 1
                        });
                        break;
                    case 'gallery':
                        gsap.to(this.camera.position, {
                            x: 0,
                            y: 1.8,
                            z: 7,
                            duration: 1
                        });
                        break;
                }
            }
            
            animate() {
                requestAnimationFrame(() => this.animate());
                
                const delta = this.clock.getDelta();
                
                // Update controls
                if (this.controls) this.controls.update(delta);
                
                // Update animations
                if (this.mixer) this.mixer.update(delta);
                
                // Render scene
                this.renderer.render(this.scene, this.camera);
            }
        }

        // Card data
        const cardData = [
            {
                id: 1,
                title: "OS1 Custom Pack",
                series: 1,
                year: 1985,
                imageUrl: "PompaPaulie.png",
                value: 125.00,
                backImage: "20250428204923.png"
            },
            // ... other card data
        ];

        // Initialize the app when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            const app = new GPKUltra3D();
        });
    </script>
</body>
</html>
